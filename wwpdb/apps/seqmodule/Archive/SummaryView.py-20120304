##
# File:    SummaryView.py
# Date:    19-Jan-2010
# Updates:
# 09-Feb-2010  jdw Adopt SequenceFeature() to access to feature dictionaries.
# 12-Feb-2010  jdw Move example data loader to the SequenceDataImportExample class.
# 14-Feb-2010  jdw Add statistics updater after primary sequence data load.
# 20-Apr-2010  jdw Ported to module seqmodule
# 27-Apr-2010  jdw Add row-level data dictionary to the summary data object.
# 02-May-2010  jdw Add SequenceSelection()
# 09-Aug-2010  RPS __loadSummary() --> Highest numbered version of coordinate sequence to be selected by default in "SELECT" column of UI
# 08-Jan-2013  jdw Select higher version of author sequence in reload operations
#
##
"""
Controlling class for the production of summary sequence view.

"""
__docformat__ = "restructuredtext en"
__author__    = "John Westbrook"
__email__     = "jwest@rcsb.rutgers.edu"
__license__   = "Creative Commons Attribution 3.0 Unported"
__version__   = "V0.08"

import sys, os.path, shutil

from wwpdb.apps.seqmodule.io.SequenceDataStore      import SequenceDataStore
from wwpdb.apps.seqmodule.io.SequenceSelection      import SequenceSelection
from wwpdb.apps.seqmodule.util.SequenceLabel        import SequenceLabel, SequenceFeature

#from wwpdb.apps.seqmodule.align.AlignmentStatistics import AlignmentStatistics
class SummaryView(object):
    """ Controlling class for the production of data for the summary sequence view.

        Supported operations:
        
         load             = load summary from current sequence data store using default sequence selection.
         reload           = reload summary using current sequence data and current selections.
            
    """
    def __init__(self,reqObj=None,verbose=False,log=sys.stderr):
        self.__verbose=verbose
        self.__reqObj=reqObj
        self.__lfh=log
        #
        self.__sessionObj = None
        # placeholdes for sequence identifiers picked on the summary page as selected and to be aligned.
        self.__summarySeqAlignList=[]
        self.__summarySeqSelectList=[]
        #
        #
        self.__groupTaxIdSelections={}
        
        self.__setup()
        

    def __setup(self):
        try:
            self.__sessionObj  = self.__reqObj.getSessionObj()
            self.__sessionPath = self.__sessionObj.getPath()
            self.__summarySeqAlignList  = self.__reqObj.getSummaryAlignList()
            self.__summarySeqSelectList = self.__reqObj.getSummarySelectList()
        except:
            if (self.__verbose):
                self.__lfh.write("+SummaryView.__setup() sessionId %s failed\n" %
                                 (self.__sessionObj.getId()))                                         

    def setGroupTaxId(self,groupId, taxId=None):
        self.__groupTaxIdSelections[groupId]=taxId
        
    def loadSummary(self,operation='load'):
        """Create the data structure to populate the HTML pages containing alignment summary --

           Options for operation:
           + load   - Performs a default selection of the best matching reference sequences then
                      creates the summary data structure.
           + reload - reloads current data from the sequence and alignment data stores. 
        """
        if (self.__verbose):
            self.__lfh.write("+SummaryView.loadSummary() with operation %s : sessionId %s\n" %
                             (operation,self.__sessionObj.getId()))
            self.__lfh.write("+SummaryView.loadSummary() align list %r\n" % (self.__summarySeqAlignList))
            self.__lfh.write("+SummaryView.loadSummary() select list %r\n" % (self.__summarySeqSelectList))                
            
        if (operation == "load"):
            sSel=SequenceSelection(reqObj=self.__reqObj,verbose=self.__verbose,log=self.__lfh)            
            self.__summarySeqSelectList=sSel.makeDefaultSelection()                        
            return self.__loadSummary(op=operation)
        elif (operation == "reload"):
            return self.__loadSummary(op=operation)
        else:
            return {}
        
    def __loadSummary(self,op='load'):
        """ Assemble data for sequence summary view using current contents of the session sequence data store.

            --- Using TaxId override --- 
        """
        #
        if (self.__verbose):
            self.__lfh.write("+SummaryView.__loadSummary() with sessionId %s\n" % self.__sessionObj.getId())
        #
        # --Get the groups list -
        #
        sds=SequenceDataStore(sessionObj=self.__sessionObj,verbose=self.__verbose,log=self.__lfh)        
        gIdList=sds.getGroupIds()
        if len(gIdList) < 1:
            if (self.__verbose):
                self.__lfh.write("+SummaryView.__loadSummary() sessionId %s group list is empty\n" %
                                 (self.__sessionObj.getId()))

        seqLabel=SequenceLabel()
        seqFeature=SequenceFeature()
        summaryDataObj={}
        rowList=[]
        #
        columnNameList=[]
        columnNameList.append("ID Code")
        #columnNameList.append("Type")
        columnNameList.append("Version")
        columnNameList.append("Length")
        columnNameList.append("Details")
        #
        if (self.__verbose):
            self.__lfh.write("+SummaryView.__loadSummary() list %r\n" % self.__summarySeqSelectList)         
        for gId in gIdList:
            #
            summaryDataObj[gId]={}
            #
            # Add a marker for self-reference -- as key = selfref
            #
            srId='selfref_'+str(gId)
            if srId in self.__summarySeqSelectList:
                if (self.__verbose):
                    self.__lfh.write("+SummaryView.__loadSummary() Group %s self referenced \n" % gId)
                summaryDataObj[gId]['selfref']=True

            else:
                summaryDataObj[gId]['selfref']=False                
            #
            #
            # Get seqIds in group -
            #
            seqIdList=sds.getGroup(gId)
            if len(seqIdList) < 1:
                if (self.__verbose):
                    self.__lfh.write("+SummaryView.__loadSummary() group %s is empty\n" % gId)
                continue
                
            seqId0=seqIdList[0]
            authTaxId=None
            #
            # Show the author sequence(s) for only the first sequence in the group (all versions)
            #
            verList=sds.getVersionIds(seqId0, altId=1, dataType="sequence", seqType='auth')
            #verList.reverse()
            rowIdList=[]
            rowLabelList=[]
            rowDataList=[]
            rowStatusList=[]
            rowDataDictList=[]                        

            for ver in  verList:
                seqAuth=sds.getSequence(seqId=seqId0,seqType='auth',altId=1,version=ver)
            
                seqLabel.set( seqType='auth',seqInstId=seqId0, seqAltId=1, seqVersion=ver)
                seqAuthId=seqLabel.pack()
                #
                seqAuthFD=sds.getFeature(seqId=seqId0,seqType='auth',altId=1,version=ver)
                #
                seqFeature.set(seqAuthFD)
                if authTaxId is None:
                    authTaxId=seqFeature.getSourceTaxId()

                detailString=seqFeature.markupAuthorFeatures()
                chIdStr=",".join(seqIdList)
                #rowLabel='PDB:' + seqId0
                rowLabel='PDB:' + chIdStr                
                rowIdList.append(seqAuthId)
                rowLabelList.append(rowLabel)
                #
                isSelected = seqAuthId in self.__summarySeqSelectList 
                isAligned =  seqAuthId in self.__summarySeqAlignList
                #
                if op == 'reload':
                    isSelected = (ver == max(verList))
                    isAligned  = (ver == max(verList))
                #
                rowStatusList.append((isSelected,isAligned))
                #row=(rowLabel,'author',ver,len(seqAuth), detailString)
                row=(rowLabel,ver,len(seqAuth), detailString)
                rowDataList.append(row)
                rowDataDict={}
                rowDataDict['ROW_ID_CODE']=rowLabel
                rowDataDict['ROW_VERSION']=ver
                rowDataDict['ROW_SEQ_LENGTH']=len(seqAuth)
                rowDataDict['ROW_DETAIL_STRING']=detailString
                rowDataDict.update(seqAuthFD)
                rowDataDictList.append(rowDataDict)                
            #
            dT={}
            dT['ROW_IDS']       =rowIdList
            dT['ROW_LABELS']    =rowLabelList
            dT['COLUMN_LABELS'] =columnNameList                    
            dT['ROW_DATA']      =rowDataList
            dT['ROW_STATUS']    =rowStatusList
            dT['ROW_DATA_DICT'] =rowDataDictList
            
            summaryDataObj[gId]['auth']=dT

            #
            dT={}
            filterTaxId=authTaxId
            if self.__groupTaxIdSelections.has_key(gId):
                filterTaxId=self.__groupTaxIdSelections[gId]

                
            dT=self.__buildReferenceSectionWithTaxIdFilter(sds,seqIdRef=seqId0,filterTaxId=filterTaxId)
            dT['COLUMN_LABELS'] =columnNameList                                
            summaryDataObj[gId]['ref']=dT
            #
            # Each coordinate sequence -
            #
            rowIdList=[]
            rowLabelList=[]
            rowDataList=[]
            rowStatusList=[]
            rowDataDictList=[]                        
            #
            for seqId in seqIdList:
                verList=sds.getVersionIds(seqId=seqId, altId=1, dataType="sequence", seqType='xyz')
                ########## RPS, 2010-08-09: Highest numbered version of coordinate sequence to be selected by default in "SELECT" column of UI #############
                maxVrsnNum=verList[0]
                # assumption above is that verList is always returned from sds as list of versions in descending order so max vrsn is first member
                seqLabel.set( seqType='xyz',seqInstId=seqId, seqAltId=1, seqVersion=maxVrsnNum)
                maxSeqXyzId=seqLabel.pack()
                if not (maxSeqXyzId in self.__summarySeqSelectList):
                    self.__summarySeqSelectList.append(maxSeqXyzId)
                ############################################################################################################################################
                for ver in verList:
                    seqXyz=sds.getSequence(seqId,'xyz',altId=1,version=ver)
                    seqXyzFD=sds.getFeature(seqId,'xyz',altId=1,version=ver)                    
                    seqLabel.set( seqType='xyz',seqInstId=seqId, seqAltId=1, seqVersion=ver)
                    seqXyzId=seqLabel.pack()                                
                    #
                    seqFeature.set(seqXyzFD)
                    detailString=seqFeature.markupXyzFeatures()
                    rowLabel='PDB:' + seqId
                    rowIdList.append(seqXyzId)
                    rowLabelList.append(rowLabel)
                    #
                    if (ver < maxVrsnNum) and (seqXyzId in self.__summarySeqSelectList):
                        self.__summarySeqSelectList.remove(seqXyzId)
                    #
                    isSelected = seqXyzId in self.__summarySeqSelectList 
                    isAligned =  seqXyzId in self.__summarySeqAlignList
                    rowStatusList.append((isSelected,isAligned))
                    #row=(rowLabel,'Coordinate',ver,len(seqXyz), detailString)
                    row=(rowLabel,ver,len(seqXyz), detailString)
                    rowDataList.append(row)
                    #
                    rowDataDict={}
                    rowDataDict['ROW_ID_CODE']=rowLabel
                    rowDataDict['ROW_VERSION']=ver
                    rowDataDict['ROW_SEQ_LENGTH']=len(seqXyz)
                    rowDataDict['ROW_DETAIL_STRING']=detailString
                    rowDataDict.update(seqXyzFD)
                    rowDataDictList.append(rowDataDict)
                    
                    
                    
            #
            dT={}
            dT['ROW_IDS']       =rowIdList
            dT['ROW_LABELS']    =rowLabelList
            dT['COLUMN_LABELS'] =columnNameList                    
            dT['ROW_DATA']      =rowDataList
            dT['ROW_STATUS']    =rowStatusList
            dT['ROW_DATA_DICT'] =rowDataDictList                        
            summaryDataObj[gId]['xyz']=dT

        return summaryDataObj


    def __buildReferenceSectionWithTaxIdFilter(self, sds, seqIdRef=None, filterTaxId=None):
        """ Return a row list of data for reference sequence corresponding to
            to the input seqId

            Implement a taxid sorting filter -- 
        """
        seqLabel=SequenceLabel()
        seqFeature=SequenceFeature()
        #
        # account for ids already presented. 
        #
        usedIdList=[]
        # 
        #
        # List of reference sequences for this group only for the leading sequence - 
        #
        altIdList=sds.getAlternativeIds(seqIdRef, dataType="sequence", seqType="ref")
        rowIdList=[]
        rowLabelList=[]
        rowDataList=[]
        rowStatusList=[]
        rowDataDictList=[]            
        #
        # First pick out the selected reference sequence if this exists --- 
        #
        for altId in altIdList:
            #
            verList=sds.getVersionIds(seqId=seqIdRef, altId=altId, dataType="sequence", seqType='ref')
            for ver in verList:
                #
                seqRefFD=sds.getFeature(seqIdRef,'ref',altId=altId,version=ver)
                seqFeature.set(seqRefFD)
                seqLabel.set( seqType='ref',seqInstId=seqIdRef, seqAltId=altId, seqVersion=ver)
                seqRefId=seqLabel.pack()                
                seqRef=sds.getSequence(seqId=seqIdRef,seqType='ref',altId=altId,version=ver)
                isSelected = seqRefId in self.__summarySeqSelectList 
                isAligned =  seqRefId in self.__summarySeqAlignList

                #
                # skip if not selected -- 
                if not isSelected:
                    continue 
                # Avoid duplicates -- 
                if seqRefId in usedIdList:
                    continue
                usedIdList.append(seqRefId)
                
                #
                detailString=seqFeature.markupReferenceFeatures()                
                rowLabel    =seqFeature.markupDatabaseReferenceWithUrl(altId)
                rowIdList.append(seqRefId)
                rowLabelList.append(rowLabel)
                rowStatusList.append((isSelected,isAligned))
                
                lengthRefSeq=seqFeature.getMatchLength()
                row=(rowLabel, ver, lengthRefSeq, detailString)
                rowDataList.append(row)
                #
                rowDataDict={}
                rowDataDict['ROW_ID_CODE']=rowLabel
                rowDataDict['ROW_VERSION']=ver
                rowDataDict['ROW_SEQ_LENGTH']=lengthRefSeq
                rowDataDict['ROW_DETAIL_STRING']=detailString
                rowDataDict.update(seqRefFD)
                rowDataDictList.append(rowDataDict)

        #
        # Next do the the corresponding taxIds  
        #
        for altId in altIdList:
            #
            verList=sds.getVersionIds(seqId=seqIdRef, altId=altId, dataType="sequence", seqType='ref')
            for ver in verList:
                #
                seqRefFD=sds.getFeature(seqIdRef,'ref',altId=altId,version=ver)
                seqFeature.set(seqRefFD)
                seqLabel.set( seqType='ref',seqInstId=seqIdRef, seqAltId=altId, seqVersion=ver)
                seqRefId=seqLabel.pack()                
                seqRef=sds.getSequence(seqId=seqIdRef,seqType='ref',altId=altId,version=ver)
                isSelected = seqRefId in self.__summarySeqSelectList 
                isAligned =  seqRefId in self.__summarySeqAlignList
                taxId=seqFeature.getSourceTaxId()                
                #
                # Avoid duplicates -- 
                if seqRefId in usedIdList:
                    continue

                # TaxId test - 
                if ( not ((filterTaxId is not None) and (str(taxId) == str(filterTaxId)))):
                    continue
                
                usedIdList.append(seqRefId)
                
                #
                detailString=seqFeature.markupReferenceFeatures()                
                rowLabel    =seqFeature.markupDatabaseReferenceWithUrl(altId)
                rowIdList.append(seqRefId)
                rowLabelList.append(rowLabel)
                rowStatusList.append((isSelected,isAligned))
                
                lengthRefSeq=seqFeature.getMatchLength()
                row=(rowLabel, ver, lengthRefSeq, detailString)
                rowDataList.append(row)
                #
                rowDataDict={}
                rowDataDict['ROW_ID_CODE']=rowLabel
                rowDataDict['ROW_VERSION']=ver
                rowDataDict['ROW_SEQ_LENGTH']=lengthRefSeq
                rowDataDict['ROW_DETAIL_STRING']=detailString
                rowDataDict.update(seqRefFD)
                rowDataDictList.append(rowDataDict)
        #
        #
        # Do whatever is left
        #
        for altId in altIdList:
            #
            verList=sds.getVersionIds(seqId=seqIdRef, altId=altId, dataType="sequence", seqType='ref')
            for ver in verList:
                #
                seqRefFD=sds.getFeature(seqIdRef,'ref',altId=altId,version=ver)
                seqFeature.set(seqRefFD)
                seqLabel.set( seqType='ref',seqInstId=seqIdRef, seqAltId=altId, seqVersion=ver)
                seqRefId=seqLabel.pack()                
                seqRef=sds.getSequence(seqId=seqIdRef,seqType='ref',altId=altId,version=ver)
                isSelected = seqRefId in self.__summarySeqSelectList 
                isAligned =  seqRefId in self.__summarySeqAlignList
                taxId=seqFeature.getSourceTaxId()                
                #
                # Avoid duplicates -- 
                if seqRefId in usedIdList:
                    continue

                
                usedIdList.append(seqRefId)
                
                #
                detailString=seqFeature.markupReferenceFeatures()                
                rowLabel    =seqFeature.markupDatabaseReferenceWithUrl(altId)
                rowIdList.append(seqRefId)
                rowLabelList.append(rowLabel)
                rowStatusList.append((isSelected,isAligned))
                
                lengthRefSeq=seqFeature.getMatchLength()
                row=(rowLabel, ver, lengthRefSeq, detailString)
                rowDataList.append(row)
                #
                rowDataDict={}
                rowDataDict['ROW_ID_CODE']=rowLabel
                rowDataDict['ROW_VERSION']=ver
                rowDataDict['ROW_SEQ_LENGTH']=lengthRefSeq
                rowDataDict['ROW_DETAIL_STRING']=detailString
                rowDataDict.update(seqRefFD)
                rowDataDictList.append(rowDataDict)
        

        # ------------- ------------- ------------- ------------- ------------- -------------
        #
        dT={}
        dT['ROW_IDS']       =rowIdList
        dT['ROW_LABELS']    =rowLabelList
        dT['ROW_DATA']      =rowDataList
        dT['ROW_STATUS']    =rowStatusList
        dT['ROW_DATA_DICT'] =rowDataDictList

        return dT
    

    def __buildReferenceSectionOLD(self, sds, seqIdRef=None):
        """ Return a row list of data for reference sequence corresponding to
            to the input seqId
        """
        seqLabel=SequenceLabel()
        seqFeature=SequenceFeature()
        #
        #
        # 
        #
        # List of reference sequences for this group only for the leading sequence - 
        #
        altIdList=sds.getAlternativeIds(seqIdRef, dataType="sequence", seqType="ref")
        rowIdList=[]
        rowLabelList=[]
        rowDataList=[]
        rowStatusList=[]
        rowDataDictList=[]            
        
        for altId in altIdList:
            #
            verList=sds.getVersionIds(seqId=seqIdRef, altId=altId, dataType="sequence", seqType='ref')
            for ver in verList:                
                #
                seqRefFD=sds.getFeature(seqIdRef,'ref',altId=altId,version=ver)
                seqFeature.set(seqRefFD)
                seqLabel.set( seqType='ref',seqInstId=seqIdRef, seqAltId=altId, seqVersion=ver)
                seqRefId=seqLabel.pack()                
                seqRef=sds.getSequence(seqId=seqIdRef,seqType='ref',altId=altId,version=ver)
                isSelected = seqRefId in self.__summarySeqSelectList 
                isAligned =  seqRefId in self.__summarySeqAlignList

                #
                detailString=seqFeature.markupReferenceFeatures()                
                rowLabel    =seqFeature.markupDatabaseReferenceWithUrl(altId)
                rowIdList.append(seqRefId)
                rowLabelList.append(rowLabel)
                rowStatusList.append((isSelected,isAligned))
                
                lengthRefSeq=seqFeature.getItem('MATCH_LENGTH')
                row=(rowLabel, ver, lengthRefSeq, detailString)
                rowDataList.append(row)
                #
                rowDataDict={}
                rowDataDict['ROW_ID_CODE']=rowLabel
                rowDataDict['ROW_VERSION']=ver
                rowDataDict['ROW_SEQ_LENGTH']=lengthRefSeq
                rowDataDict['ROW_DETAIL_STRING']=detailString
                rowDataDict.update(seqRefFD)
                rowDataDictList.append(rowDataDict)

        #
        dT={}
        dT['ROW_IDS']       =rowIdList
        dT['ROW_LABELS']    =rowLabelList
        dT['ROW_DATA']      =rowDataList
        dT['ROW_STATUS']    =rowStatusList
        dT['ROW_DATA_DICT'] =rowDataDictList

        return dT
    

    def formatTable(self,summaryDataObj,ofh=sys.stdout):
        ofh.write("\nContents of summary data object:\n")
        for gId,gObj in summaryDataObj.items():
            ofh.write("\nData for Sequence Group %5s\n" % str(gId))
            ofh.write("----------------------------------\n")
            for seqType, gD in gObj.items():
                if seqType == 'selfref':
                    continue                
                ofh.write("\n  Data table for type %8s: \n" % seqType)
                colNameList=gD['COLUMN_LABELS']
                rowDataList=gD['ROW_DATA']
                ofh.write("\n          ")
                for col in colNameList:
                    ofh.write("%15s " % col)
                #
                ofh.write("\n")
                iRow=1
                for row in rowDataList:
                    ofh.write("Row %5d " % iRow)
                    for col in row:
                        ofh.write("%15s " % col)
                    ofh.write("\n")
                    iRow+=1
        
                
if __name__ == '__main__':
    pass
